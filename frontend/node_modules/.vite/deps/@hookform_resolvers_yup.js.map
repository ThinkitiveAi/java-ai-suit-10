{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestErrors.ts", "../../@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Ref,\n  ResolverOptions,\n  get,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field && field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  Field,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n  ResolverOptions,\n  get,\n  set,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => {\n  const path = escapeBrackets(name);\n  return names.some((n) => escapeBrackets(n).match(`^${path}\\\\.\\\\d+`));\n};\n\n/**\n * Escapes special characters in a string to be used in a regex pattern.\n * it removes the brackets from the string to match the `set` method.\n *\n * @param input - The input string to escape.\n * @returns The escaped string.\n */\nfunction escapeBrackets(input: string): string {\n  return input.replace(/\\]|\\[/g, '');\n}\n", "import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  FieldError,\n  FieldValues,\n  Resolver,\n  appendErrors,\n} from 'react-hook-form';\nimport * as Yup from 'yup';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nfunction parseErrorSchema(\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n}\n\nexport function yupResolver<Input extends FieldValues, Context, Output>(\n  schema:\n    | Yup.ObjectSchema<Input, any, Output, any>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<Input, any, Output, any>>>,\n  schemaOptions?: Parameters<(typeof schema)['validate']>[1],\n  resolverOptions?: {\n    mode?: 'async' | 'sync';\n    raw?: false;\n  },\n): Resolver<Input, Context, Yup.InferType<typeof schema>>;\n\nexport function yupResolver<Input extends FieldValues, Context, Output>(\n  schema:\n    | Yup.ObjectSchema<Input, any, Output, any>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<Input, any, Output, any>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] | undefined,\n  resolverOptions: {\n    mode?: 'async' | 'sync';\n    raw: true;\n  },\n): Resolver<Input, Context, Input>;\n\n/**\n * Creates a resolver for react-hook-form using Yup schema validation\n * @param {Yup.ObjectSchema<TFieldValues> | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>} schema - Yup validation schema\n * @param {Parameters<(typeof schema)['validate']>[1]} schemaOptions - Options to pass to Yup's validate/validateSync\n * @param {Object} resolverOptions - Additional resolver configuration\n * @param {('async' | 'sync')} [resolverOptions.mode] - Validation mode\n * @param {boolean} [resolverOptions.raw] - If true, returns raw values instead of validated results\n * @returns {Resolver<Yup.InferType<typeof schema> | Input>} A resolver function compatible with react-hook-form\n * @example\n * const schema = Yup.object({\n *   name: Yup.string().required(),\n *   age: Yup.number().required(),\n * });\n *\n * useForm({\n *   resolver: yupResolver(schema)\n * });\n */\nexport function yupResolver<Input extends FieldValues, Context, Output>(\n  schema:\n    | Yup.ObjectSchema<Input, any, Output, any>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<Input, any, Output, any>>>,\n  schemaOptions?: Parameters<(typeof schema)['validate']>[1],\n  resolverOptions: {\n    mode?: 'async' | 'sync';\n    raw?: boolean;\n  } = {},\n): Resolver<Input, Context, Yup.InferType<typeof schema> | Input> {\n  return async (values: Input, context, options) => {\n    try {\n      if (schemaOptions?.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? Object.assign({}, values) : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "path", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "set", "name", "escapeBrackets", "some", "n", "match", "input", "replace", "yupResolver", "schema", "schemaOptions", "resolverOptions", "values", "context", "options", "Promise", "resolve", "console", "warn", "mode", "Object", "assign", "abortEarly", "then", "result", "shouldUseNativeValidation", "validateFieldsNatively", "raw", "errors", "_catch", "e", "inner", "toNestErrors", "error", "validateAllFieldCriteria", "criteriaMode", "reduce", "previous", "path", "message", "type", "types", "messages", "appendErrors", "concat", "reject"]
}
